package {${controllerPackageName}$};
/*
 *  Generated from GenSpringBootGen
 *  Copyright(c) 2019 by RADical Information Design Corporation
 *  Template: WebControllerTemplate.java.txt
*/ 

import static java.lang.System.out;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;
import com.radinfodesign.radspringbootgen.util.Util;

import {${modelPackageName}$}.{${MODEL_ENTITY}$};
import {${servicePackageName}$}.{${MODEL_ENTITY}$}Service;
{${ACT_THIRD_ENTITIES_ONLY=import {${servicePackageName}$}.{${FK_CHILD_ENTITY}$}Service;
}$}{${ACT_FK_REF_ENTITIES=import {${servicePackageName}$}.{${FK_REF_ENTITY}$}Service;
!!}$}{${ACT_FK_CHILD_AND_THIRD_ENTITIES=import {${modelPackageName}$}.{${FK_CHILD_ENTITY}$};
!!}$}{${ACT_FK_CHILD_W_COMPOUND_KEYS_AND_THIRD_ENTITIES=import {${modelPackageName}$}.{${FK_CHILD_ENTITY}$};
!!}$}{${ACT_FK_CHILD_ENTITIES_W_COMPOUND_KEYS=import {${modelPackageName}$}.{${FK_CHILD_EMBEDDED_PK}$};
}$}

@Controller
@RequestMapping({${webControllerClass}$}.ENTITY_URL)
public class {${webControllerClass}$} {

  public static final String ENTITY_URL = "{${ENTITY_URL}$}";
  public static final String BUSINESS_ENTITY = "{${BUSINESS_ENTITY}$}";
  public static final String BUSINESS_ENTITY_VAR = "businessEntity";
  public static final String INSTANCE = "{${MODEL_ENTITY_INIT_SMALL}$}";
  public static final String INSTANCES = "instances";
  public static final String ALL_ENTITY_URL = "";
  public static final String ENTITY_EDIT_URL = "/Edit";
  public static final String ENTITY_DELETE_URL = "/Delete";
  public static final String ENTITY_PUT_URL = "/Put";
  public static final String ENTITY_LIST_PAGE = "entity/list";
  public static final String ENTITY_EDIT_PAGE = "{${ENTITY_EDIT_PAGE}$}";
  public static final String ENTITY_ATT_ID = "{${ENTITY_ATT_ID}$}";
  {${ACT_ALL_ATTRIBS=public static final String ENTITY_ATTRIB_{${ENTITY_ATTRIB_UPPER_NAME}$}="{${ENTITY_ATTRIB_NAME}$}";
  }$}
!!  {${ACT_FK_CHILD_ENTITY_W_COMPOUND_KEY_ATTRIBS=public static final String ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER}$}_{${ENTITY_ATTRIB_UPPER_NAME}$}="{${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}";
!!  }$}
  {${ACT_FK_CHILD_ENTITY_ATTRIBS=public static final String ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER}$}_{${ENTITY_ATTRIB_UPPER_NAME}$}="{${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}";
  }$}{${ACT_FK_REF_ENTITIES=public static final String ENTITY_ATTRIB_{${FK_REF_ENTITY_UPPER_PLURAL}$}="{${FK_REF_ENTITY_INIT_SMALL}$}s";
  }$}{${ACT_THIRD_ENTITIES_ONLY=public static final String ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER_PLURAL}$}="{${FK_CHILD_ENTITY_INIT_SMALL}$}s";
  }$}public static final String MODEL_ATTRIBUTE_FORM_ACTION = "formAction";
  public static final String MODEL_ATTRIBUTE_DELETE_FORM_ACTION = "deleteFormAction";
  public static final String MODEL_ATTRIBUTE_ENTITY_ID = "entityId";
  public static final String MODEL_ATTRIBUTE_LIST_PATH = "listPath";

  public static final String MESSAGE = "message";
  public static final String MSG = "msg";
    
  @Autowired
  {${MODEL_ENTITY}$}Service service;
  {${ACT_THIRD_ENTITIES_ONLY=@Autowired 
  {${FK_CHILD_ENTITY}$}Service {${FK_CHILD_ENTITY_INIT_SMALL}$}Service;
!!  {${FK_REF_ENTITY}$}Service {${FK_REF_ENTITY_INIT_SMALL}$}Service;
  }$}{${ACT_FK_REF_ENTITIES=@Autowired
  {${FK_REF_ENTITY}$}Service {${FK_REF_ENTITY_INIT_SMALL}$}Service;
  }$}
  @GetMapping(value=ALL_ENTITY_URL)
  public String listEntities (Model model) {
    model.addAttribute(INSTANCES, service.getAll());
    model.addAttribute(BUSINESS_ENTITY_VAR, BUSINESS_ENTITY);
    model.addAttribute(MODEL_ATTRIBUTE_FORM_ACTION, ENTITY_URL+ENTITY_EDIT_URL);
    model.addAttribute(MODEL_ATTRIBUTE_DELETE_FORM_ACTION, ENTITY_URL+ENTITY_DELETE_URL);
    model.addAttribute(MODEL_ATTRIBUTE_ENTITY_ID, ENTITY_ATT_ID);
    return ENTITY_LIST_PAGE;
  }

  @PostMapping(value=ENTITY_EDIT_URL)
  public String editEntity ( @RequestParam (name=ENTITY_ATT_ID, defaultValue="0") Integer {${ENTITY_ATT_ID}$}
                           , Model model
                           , HttpServletRequest request
                           ) {
    {${MODEL_ENTITY}$} entity = null;
    Map modelMap = model.asMap();
    Integer {${ENTITY_ATT_ID}$}2 = (Integer)request.getAttribute(ENTITY_ATT_ID);
    String message = (String)modelMap.get(MESSAGE);
    if ({${ENTITY_ATT_ID}$}==null || {${ENTITY_ATT_ID}$}==0) {
      {${ENTITY_ATT_ID}$} = {${ENTITY_ATT_ID}$}2;
      if ({${ENTITY_ATT_ID}$}==null || {${ENTITY_ATT_ID}$}==0)
        entity = new
                 {${MODEL_ENTITY}$}();
      else
        entity = service.getEntity({${ENTITY_ATT_ID}$});
    }
    else entity = service.getEntity({${ENTITY_ATT_ID}$});

    model.addAttribute(INSTANCE, entity);
    model.addAttribute(MODEL_ATTRIBUTE_LIST_PATH, ENTITY_URL+ALL_ENTITY_URL);
    model.addAttribute(MESSAGE, (String)request.getAttribute(MSG));
    model.addAttribute(MODEL_ATTRIBUTE_FORM_ACTION, ENTITY_URL+ENTITY_PUT_URL);
    {${ACT_FK_REF_ENTITIES=model.addAttribute(ENTITY_ATTRIB_{${FK_REF_ENTITY_UPPER_PLURAL}$}, {${FK_REF_ENTITY_INIT_SMALL}$}Service.getAll());
!!    }$}{${ACT_IF_THIRD_ENTITIES_EXIST=if ({${ENTITY_ATT_ID}$} == null) {
!!      {${ACT_THIRD_ENTITIES_ONLY=model.addAttribute(ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER_PLURAL}$}, {${FK_CHILD_ENTITY_INIT_SMALL}$}Service.getAll());
!!      }$}
!!    }
!!    else {
!!      {${ACT_THIRD_ENTITIES_ONLY=model.addAttribute(ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER_PLURAL}$}, {${FK_CHILD_ENTITY_INIT_SMALL}$}Service.getQualified{${FK_CHILD_ENTITY}$}sBy{${ENTITY_ATT_ID_INIT_CAP}$}(entity.{${GET_ENTITY_ATT_ID}$}()));
!!      }$}
!!    }
!!    }$}
    }$}{${ACT_THIRD_ENTITIES_ONLY=if ({${ENTITY_ATT_ID}$} == null) {
      model.addAttribute(ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER_PLURAL}$}, {${FK_CHILD_ENTITY_INIT_SMALL}$}Service.getAll());
    }
    else {
      model.addAttribute(ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER_PLURAL}$}, {${FK_CHILD_ENTITY_INIT_SMALL}$}Service.getQualified{${FK_CHILD_ENTITY}$}sBy{${ENTITY_ATT_ID_INIT_CAP}$}(entity.{${GET_ENTITY_ATT_ID}$}()));
    }
    }$}
    return ENTITY_EDIT_PAGE;
  }
    
  @PostMapping(value = ENTITY_PUT_URL)
  public String putEntity ( @RequestParam(name=ENTITY_ATT_ID, defaultValue="0") Integer {${ENTITY_ATT_ID}$}
                          {${ACT_ALL_ATTRIBS=, @RequestParam(name=ENTITY_ATTRIB_{${ENTITY_ATTRIB_UPPER_NAME}$}) {${ENTITY_ATTRIB_DEFAULT_DATATYPE}$} {${ENTITY_ATTRIB_NAME}$}
!!                          }$}{${ACT_FK_CHILD_ENTITY_W_COMPOUND_KEY_ATTRIBS=, @RequestParam(name=ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER}$}_{${ENTITY_ATTRIB_UPPER_NAME}$}, required=false) {${ENTITY_ATTRIB_DEFAULT_DATATYPE}$}[] {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s
                          }$}{${ACT_FK_CHILD_ENTITY_ATTRIBS=, @RequestParam(name=ENTITY_ATTRIB_{${FK_CHILD_ENTITY_UPPER}$}_{${ENTITY_ATTRIB_UPPER_NAME}$}, required=false) {${ENTITY_ATTRIB_DEFAULT_DATATYPE}$}[] {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s
                          }$}, Model model
                          , HttpServletRequest request
                          )
  {
    String message = ""; 
    try {
      {${MODEL_ENTITY}$} entity = service.putEntity( {${ENTITY_ATT_ID}$}
                                         {${ACT_ALL_ATTRIBS=, {${ENTITY_ATTRIB_NAME}$}
                                         }$}{${ACT_FK_CHILD_ENTITY_ATTRIBS=, {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s
                                         }$});
      message = "{${MODEL_ENTITY}$} saved.";
      request.setAttribute(ENTITY_ATT_ID, entity.{${GET_ENTITY_ATT_ID}$}());
    }
    catch (Exception e) {
      message = Util.getFriendlyErrorMessage(e, "Sorry, {${MODEL_ENTITY}$} NOT saved." + e.getMessage());
    }
    request.setAttribute(MSG, message);
    request.setAttribute(RedirectView.RESPONSE_STATUS_ATTRIBUTE, HttpStatus.TEMPORARY_REDIRECT);
    return "forward:"+ENTITY_URL+ENTITY_EDIT_URL;
  }
    
  @PostMapping(value = ENTITY_DELETE_URL)
  public String deleteEntity ( @RequestParam(name=ENTITY_ATT_ID, defaultValue="0") Integer {${ENTITY_ATT_ID}$}
                             , HttpServletRequest request 
                             ) 
  {
    String message = "";
    int deleteSuccess = service.deleteEntity({${ENTITY_ATT_ID}$});
    if (deleteSuccess == 1) {
    message = "{${MODEL_ENTITY}$} record deleted.";
    } else {
      message = "Sorry, {${MODEL_ENTITY}$} record NOT deleted. No further information is available, but it is not permitted to delete parent records referenced by child records.";
    }
    request.setAttribute(MSG, message);
    return "redirect:"+ENTITY_URL;
  }


  {${ACT_FK_CHILD_ENTITIES_W_COMPOUND_KEYS=
  @PostMapping(value = "/Delete{${FK_CHILD_ENTITY}$}")
!!  public String delete{${FK_CHILD_ENTITY}$} ( {${ACT_PK_ATTRIBS=@RequestParam(name="{${ENTITY_ATTRIB_NAME}$}") {${ENTITY_ATTRIB_DEFAULT_DATATYPE}$} {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}
  public String delete{${FK_CHILD_ENTITY}$} ( {${ACT_PK_ATTRIBS=@RequestParam(name="{${ENTITY_ATTRIB_NAME}$}") {${ENTITY_ATTRIB_DEFAULT_DATATYPE}$} {${ENTITY_ATTRIB_NAME}$}
                                       , }$}Model model
                                       , HttpServletRequest request
                                       ) 
  {
    out.println("");
    String message = null;
!!    int deleteResult = service.delete{${FK_CHILD_ENTITY}$} {${COMPOUND_PK_PARAM_LIST_CHILD_ENTITY}$};
    int deleteResult = service.delete{${FK_CHILD_ENTITY}$} ({${PK_ID_ATTRIB_LIST}$});

    if (deleteResult == 1) { 
      message = "{${FK_CHILD_ENTITY}$} record deleted.";  
    }
    else 
    {
      message = "{${FK_CHILD_ENTITY}$} deletion failed.";  
    }
    request.setAttribute(MSG, message);
!!    {${MODEL_ENTITY}$} entity = service.getEntity({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATT_ID_INIT_CAP}$});
    {${MODEL_ENTITY}$} entity = service.getEntity({${ENTITY_ATT_ID}$});
    model.addAttribute(INSTANCE, entity);
    request.setAttribute(ENTITY_ATT_ID, entity.get{${ENTITY_ATT_ID_INIT_CAP}$}());
    request.setAttribute(RedirectView.RESPONSE_STATUS_ATTRIBUTE, HttpStatus.TEMPORARY_REDIRECT);
    return "forward:"+ENTITY_URL+ENTITY_EDIT_URL;
  }
}$}

  {${ACT_FK_CHILD_ENTITIES_W_SIMPLE_KEYS=
  @PostMapping(value = "/Delete{${FK_CHILD_ENTITY}$}")
  public String delete{${FK_CHILD_ENTITY}$} 
!!                     ( @RequestParam(name="{${PK_ID_FIELD}$}") Integer {${FK_CHILD_ENTITY_INIT_SMALL}$}{${PK_ID_FIELD_INIT_CAP}$}
!!                     , @RequestParam(name="{${ENTITY_ATT_ID}$}") Integer {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATT_ID_INIT_CAP}$}
                     ( @RequestParam(name="{${PK_ID_FIELD}$}") Integer {${PK_ID_FIELD}$}
                     , @RequestParam(name="{${ENTITY_ATT_ID}$}") Integer {${ENTITY_ATT_ID}$}
                     , Model model
                     , HttpServletRequest request
                     ) 
  {
    out.println("");
    out.println("delete{${FK_CHILD_ENTITY}$}()");
    String message = null;
!!    int deleteResult = service.delete{${FK_CHILD_ENTITY}$} ( {${FK_CHILD_ENTITY_INIT_SMALL}$}{${PK_ID_FIELD_INIT_CAP}$} );
    int deleteResult = service.delete{${FK_CHILD_ENTITY}$} ( {${PK_ID_FIELD}$} );
    if (deleteResult == 1) {
      message = "{${FK_CHILD_ENTITY}$} record deleted.";  
    }
    else 
    {
      message = "{${FK_CHILD_ENTITY}$} deletion failed.";  
    }
    request.setAttribute(MSG, message);
!!    {${MODEL_ENTITY}$} entity = service.getEntity({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATT_ID_INIT_CAP}$});
    {${MODEL_ENTITY}$} entity = service.getEntity({${ENTITY_ATT_ID}$});
    model.addAttribute(INSTANCE, entity);
    request.setAttribute(ENTITY_ATT_ID, entity.{${GET_ENTITY_ATT_ID}$}());
    request.setAttribute(RedirectView.RESPONSE_STATUS_ATTRIBUTE, HttpStatus.TEMPORARY_REDIRECT);
    return "forward:"+ENTITY_URL+ENTITY_EDIT_URL;
  }
  }$}
}

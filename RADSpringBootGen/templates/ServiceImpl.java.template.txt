/*
 *  Generated from GenSpringBootComponents(TM)
 *  Copyright(c) 2018 by RADical Information Design Corporation
 *  Template: ServiceImplTemplate.java.txt
*/ 
package {${servicePackageName}$};

import static java.lang.System.out;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import {${repositoryPackageName}$}.{${MODEL_ENTITY}$}Repository;
{${ACT_FK_CHILD_AND_THIRD_ENTITIES=import {${repositoryPackageName}$}.{${FK_CHILD_ENTITY}$}Repository;
}$}{${ACT_FK_REF_ENTITIES=import {${repositoryPackageName}$}.{${FK_REF_ENTITY}$}Repository;
}$}import {${modelPackageName}$}.{${MODEL_ENTITY}$};
{${ACT_FK_CHILD_AND_THIRD_ENTITIES=import {${modelPackageName}$}.{${FK_CHILD_ENTITY}$};
}$}
@Service
public class {${MODEL_ENTITY}$}ServiceImpl implements {${MODEL_ENTITY}$}Service{
  
  @Autowired
  {${MODEL_ENTITY}$}Repository {${MODEL_ENTITY_INIT_SMALL}$}Repository; 
  {${ACT_FK_CHILD_W_COMPOUND_KEYS_AND_THIRD_ENTITIES=@Autowired
  {${FK_CHILD_ENTITY}$}Repository {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository;
  }$}{${ACT_FK_CHILD_ENTITIES=@Autowired
  {${FK_CHILD_ENTITY}$}Repository {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository;
  }$}{${ACT_FK_REF_ENTITIES=@Autowired
  {${FK_REF_ENTITY}$}Repository {${FK_REF_ENTITY_INIT_SMALL}$}Repository;
  }$}
  @Override
  public List<{${MODEL_ENTITY}$}> getAll() {
    return {${MODEL_ENTITY_INIT_SMALL}$}Repository.findAllInDefaultOrder();
  }
  
  @Override
  public {${MODEL_ENTITY}$} getEntity (Integer {${PK_ID_FIELD}$}) {
    return {${MODEL_ENTITY_INIT_SMALL}$}Repository.findOne({${PK_ID_FIELD}$});
  }
 
  @Override
  @Transactional
  public {${MODEL_ENTITY}$} putEntity 
       ( Integer {${PK_ID_FIELD}$}
       {${ACT_ALL_ATTRIBS=, {${ENTITY_ATTRIB_DEFAULT_DATATYPE}$} {${ENTITY_ATTRIB_NAME}$}
       }$}{${ACT_FK_CHILD_ENTITY_ATTRIBS=, {${ENTITY_ATTRIB_DEFAULT_DATATYPE}$}[] {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s
       }$}) throws Exception
  {
    out.println("{${MODEL_ENTITY}$}ServiceClass.putEntity()");
    {${MODEL_ENTITY}$} {${MODEL_ENTITY_INIT_SMALL}$};
    if ({${PK_ID_FIELD}$}==null || {${PK_ID_FIELD}$}==0) {${MODEL_ENTITY_INIT_SMALL}$} = new {${MODEL_ENTITY}$}();
    else {${MODEL_ENTITY_INIT_SMALL}$} = {${MODEL_ENTITY_INIT_SMALL}$}Repository.findOne({${PK_ID_FIELD}$});
    
    {${ACT_DATE_TIME_ATTRIBS=LocalDateTime {${ENTITY_DATE_TIME_ATTRIB_NAME}$}_ = null;
    try {
       {${ENTITY_DATE_TIME_ATTRIB_NAME}$}_ = LocalDateTime.parse({${ENTITY_DATE_TIME_ATTRIB_NAME}$}, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
    } catch (DateTimeParseException e) {
      out.println("No good value for {${ENTITY_DATE_TIME_ATTRIB_NAME}$}: " + e.getMessage());
    }
    {${MODEL_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${ENTITY_DATE_TIME_ATTRIB_NAME}$}_);
    }$}{${ACT_DATE_ATTRIBS=LocalDate {${ENTITY_DATE_ATTRIB_NAME}$}_ = null;
    try {
       {${ENTITY_DATE_ATTRIB_NAME}$}_ = LocalDate.parse({${ENTITY_DATE_ATTRIB_NAME}$}, DateTimeFormatter.ISO_LOCAL_DATE);
    } catch (DateTimeParseException e) {
      out.println("No good value for {${ENTITY_DATE_ATTRIB_NAME}$}: " + e.getMessage());
    }
    {${MODEL_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${ENTITY_DATE_ATTRIB_NAME}$}_);
    }$}
    {${ACT_NON_TEMPORAL_ATTRIBS={${MODEL_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${ENTITY_ATTRIB_NAME}$});
    }$}{${ACT_FK_REF_ATTRIBS={${MODEL_ENTITY_INIT_SMALL}$}.set{${FK_REF_ATTRIB_INITCAPS}$}({${FK_REF_ENTITY_INIT_SMALL}$}Repository.findOne({${FK_REF_ATTRIB_NAME}$}));
    }$}
    {${MODEL_ENTITY_INIT_SMALL}$} = {${MODEL_ENTITY_INIT_SMALL}$}Repository.save({${MODEL_ENTITY_INIT_SMALL}$});
    System.out.println("{${MODEL_ENTITY}$}ServiceImpl.putEntity: id = " + {${MODEL_ENTITY_INIT_SMALL}$}.get{${PK_ID_FIELD_INIT_CAP}$}());

    {${ACT_THIRD_ENTITIES_ONLY={${FK_CHILD_ENTITY}$} {${FK_CHILD_ENTITY_INIT_SMALL}$} = null;
    }$}{${ACT_FK_CHILD_ENTITIES_W_COMPOUND_KEYS=
    {${FK_CHILD_ENTITY}$} {${FK_CHILD_ENTITY_INIT_SMALL}$} = null;
    if ({${FK_CHILD_ENTITY_INIT_SMALL}$}{${FK_REF_ENTITY_ID_INIT_CAP}$}s != null) {
      final int NEW_RECORD = {${FK_CHILD_ENTITY_INIT_SMALL}$}{${FK_REF_ENTITY_ID_INIT_CAP}$}s.length-1; // ASSUME LAST RECORD REPRESENTS NEW/BLANK TO BE INSERTED.
      for (int i=0; i<{${FK_CHILD_ENTITY_INIT_SMALL}$}{${FK_REF_ENTITY_ID_INIT_CAP}$}s.length; i++) {
        {${PK_FK_REF_ENTITY_INIT_SMALL}$} = {${PK_FK_REF_ENTITY_INIT_SMALL}$}Repository.findOne({${FK_CHILD_ENTITY_INIT_SMALL}$}{${FK_REF_ENTITY_ID_INIT_CAP}$}s[i]);
        if ({${PK_FK_REF_ENTITY_INIT_SMALL}$} == null | {${MODEL_ENTITY_INIT_SMALL}$} == null) continue; // {${MODEL_ENTITY_INIT_SMALL}$} should NEVER be null at this point
        if (i==NEW_RECORD) {
          {${FK_CHILD_ENTITY_INIT_SMALL}$} = new {${CALL_COMPOUND_CONSTRUCTOR}$};
          out.println("NEW {${FK_CHILD_ENTITY_INIT_SMALL}$} = " + {${FK_CHILD_ENTITY_INIT_SMALL}$});
        }
        else {
          {${FK_CHILD_ENTITY_INIT_SMALL}$} = {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.{${FIND_ONE_BY_PK_FK_CRITERIA}$};
        }
        {${ACT_DATE_TIME_ATTRIBS=LocalDateTime {${ENTITY_DATE_TIME_ATTRIB_NAME}$}_ = null;
        try {
          {${ENTITY_DATE_TIME_ATTRIB_NAME}$}_ = LocalDateTime.parse({${ENTITY_DATE_TIME_ATTRIB_NAME}$}, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        } catch (DateTimeParseException e) {
          out.println("No good value for {${ENTITY_DATE_TIME_ATTRIB_NAME}$}: " + e.getMessage());
        }
        {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${ENTITY_DATE_TIME_ATTRIB_NAME}$}_);
        }$}{${ACT_DATE_ATTRIBS=LocalDate {${ENTITY_DATE_ATTRIB_NAME}$}_ = null;
        try {
           {${ENTITY_DATE_ATTRIB_NAME}$}_ = LocalDate.parse({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_INITCAPS}$}s[i], DateTimeFormatter.ISO_LOCAL_DATE);
        } catch (DateTimeParseException e) {
          out.println("No good value for {${ENTITY_DATE_ATTRIB_NAME}$}: " + e.getMessage());
        }
        {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${ENTITY_DATE_ATTRIB_NAME}$}_);
        }$}
        {${ACT_NON_TEMPORAL_ATTRIBS=if ({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s.length > 0)
          {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s[i]);
        }$}
!!        {${ACT_DATE_ATTRIBS=LocalDate {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_NAME}$}_ = null;
!!        try {
!!          {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_NAME}$}_ = LocalDate.parse({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_INITCAPS}$}s[i], DateTimeFormatter.ISO_LOCAL_DATE);
!!	      {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_DATE_ATTRIB_INITCAPS}$}({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_NAME}$}_);
!!        } catch (DateTimeParseException e) {
!!	      out.println("No good value for {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_NAME}$}: " + e.getMessage());
!!        }
!!        }$}
        if (i==NEW_RECORD) {
          int insertResult = {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.insert{${FK_CHILD_ENTITY}$}({${FK_CHILD_ENTITY_INIT_SMALL}$});
        }
        else {
          {${FK_CHILD_ENTITY_INIT_SMALL}$} = {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.save({${FK_CHILD_ENTITY_INIT_SMALL}$});
        }
      }
    }
    }$}            
    {${ACT_FK_CHILD_ENTITIES={${FK_CHILD_ENTITY}$} {${FK_CHILD_ENTITY_INIT_SMALL}$} = null;
    if ({${FK_CHILD_ENTITY_INIT_SMALL}$}{${FIRST_NON_KEY_REQUIRED_ATTRIB_INIT_CAP}$}s != null) {
      for (int i=0; i<{${FK_CHILD_ENTITY_INIT_SMALL}$}{${FIRST_NON_KEY_REQUIRED_ATTRIB_INIT_CAP}$}s.length; i++) {
      if ({${FK_CHILD_ENTITY_INIT_SMALL}$}{${FIRST_NON_KEY_REQUIRED_ATTRIB_INIT_CAP}$}s[i] == null |  {${FK_CHILD_ENTITY_INIT_SMALL}$}{${FIRST_NON_KEY_REQUIRED_ATTRIB_INIT_CAP}$}s[i].equals("")) continue;
        if (({${FK_CHILD_ENTITY_INIT_SMALL}$}{${PK_ID_FIELD_INIT_CAP}$}s.length == 0) || ({${FK_CHILD_ENTITY_INIT_SMALL}$}{${PK_ID_FIELD_INIT_CAP}$}s[i] == null)) {
          {${FK_CHILD_ENTITY_INIT_SMALL}$} = new {${FK_CHILD_ENTITY}$}();
        } else {
          {${FK_CHILD_ENTITY_INIT_SMALL}$} = {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.findOne({${FK_CHILD_ENTITY_INIT_SMALL}$}{${PK_ID_FIELD_INIT_CAP}$}s[i]);
        }
        {${ACT_DATE_TIME_ATTRIBS=LocalDateTime {${ENTITY_DATE_TIME_ATTRIB_NAME}$}_ = null;
        try {
         {${ENTITY_DATE_TIME_ATTRIB_NAME}$}_ = LocalDateTime.parse({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_INITCAPS}$}s[i], DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        } catch (DateTimeParseException e) {
          out.println("No good value for {${ENTITY_DATE_TIME_ATTRIB_NAME}$}: " + e.getMessage());
        }
        {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${ENTITY_DATE_TIME_ATTRIB_NAME}$}_);
        }$}{${ACT_DATE_ATTRIBS=LocalDate {${ENTITY_DATE_ATTRIB_NAME}$}_ = null;
        try {
         {${ENTITY_DATE_ATTRIB_NAME}$}_ = LocalDate.parse({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_DATE_ATTRIB_INITCAPS}$}s[i], DateTimeFormatter.ISO_LOCAL_DATE);
        } catch (DateTimeParseException e) {
          out.println("No good value for {${ENTITY_DATE_ATTRIB_NAME}$}: " + e.getMessage());
        }
        {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${ENTITY_DATE_ATTRIB_NAME}$}_);
        }$}{${ACT_NON_TEMPORAL_ATTRIBS=if ({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s.length > 0)
          {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATTRIB_INITCAPS}$}({${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}s[i]);
        }$}{${ACT_FK_REF_ATTRIBS=if ({${FK_CHILD_ENTITY_INIT_SMALL}$}{${FK_REF_ATTRIB_INITCAPS}$}s.length > 0)
          {${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${FK_REF_ATTRIB_INITCAPS}$}({${FK_REF_ENTITY_INIT_SMALL}$}Repository.findOne({${FK_CHILD_ENTITY_INIT_SMALL}$}{${FK_REF_ATTRIB_INITCAPS}$}s[i]));
        }$}{${FK_CHILD_ENTITY_INIT_SMALL}$}.set{${ENTITY_ATT_ID_INIT_CAP}$}({${MODEL_ENTITY_INIT_SMALL}$});
        {${FK_CHILD_ENTITY_INIT_SMALL}$} = {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.save({${FK_CHILD_ENTITY_INIT_SMALL}$});
      }
    }}$}             
    return {${MODEL_ENTITY_INIT_SMALL}$};
  }
  
  @Override
  @Transactional
  public int deleteEntity(Integer {${PK_ID_FIELD}$}) {
    {${MODEL_ENTITY}$} {${MODEL_ENTITY_INIT_SMALL}$} = {${MODEL_ENTITY_INIT_SMALL}$}Repository.findOne({${PK_ID_FIELD}$});
    try {
      {${MODEL_ENTITY_INIT_SMALL}$}Repository.delete({${MODEL_ENTITY_INIT_SMALL}$});
      return 1;
    } catch (Exception e) { // WILL THIS EVER HAPPEN? WHAT HAPPENS IF DELETE FAILS?
      out.println("{${MODEL_ENTITY}$}ServiceClass threw Exception: " + e.getMessage());
      e.printStackTrace();
      return -1;
    }
  }

  {${ACT_FK_CHILD_ENTITIES_W_COMPOUND_KEYS=@Override
  @Transactional
  public int delete{${FK_CHILD_ENTITY}$} 
                  ( {${ACT_PK_ATTRIBS_COMMA_SEPARATED={${ENTITY_ATTRIB_DEFAULT_DATATYPE}$} {${FK_CHILD_ENTITY_INIT_SMALL}$}{${ENTITY_ATTRIB_INITCAPS}$}
                  }$}) {
    {${PK_FK_REF_ENTITIES_DECLARE_REPOSITORY_FIND}$}
    {${FK_CHILD_ENTITY}$} {${FK_CHILD_ENTITY_INIT_SMALL}$} = {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.{${FIND_ONE_BY_PK_FK_CRITERIA}$};
    if ({${FK_CHILD_ENTITY_INIT_SMALL}$} != null) { 
      {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.delete({${FK_CHILD_ENTITY_INIT_SMALL}$});
      return 1;
    }
    else { return -1; }
  }
  }$}
  {${ACT_FK_CHILD_ENTITIES=@Override
  @Transactional
  public int delete{${FK_CHILD_ENTITY}$} (Integer {${PK_ID_FIELD}$}) 
  {
    {${FK_CHILD_ENTITY}$} {${FK_CHILD_ENTITY_INIT_SMALL}$} = {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.findOne({${PK_ID_FIELD}$});
    if ({${FK_CHILD_ENTITY_INIT_SMALL}$} != null) { 
      {${FK_CHILD_ENTITY_INIT_SMALL}$}Repository.delete({${FK_CHILD_ENTITY_INIT_SMALL}$});
      return 1;
    }
    else { return -1; }
  }
  }$}
  {${ACT_THIRD_ENTITIES_ONLY=public List<{${MODEL_ENTITY}$}> getQualified{${MODEL_ENTITY}$}sBy{${PK_ID_FIELD_INIT_CAP}$} (Integer {${PK_ID_FIELD}$}){
    return {${MODEL_ENTITY_INIT_SMALL}$}Repository.selectQualified{${MODEL_ENTITY}$}sBy{${PK_ID_FIELD_INIT_CAP}$}({${PK_ID_FIELD}$});
  }
  }$}    
}

